//
// Copyright (c) 2017-2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

[[required-apis]]
== Required APIs

MicroProfile implementations must include the following specifications:

 - <<jakarta-cdi, Jakarta Contexts and Dependency Injection 3.0>>
 - <<jakarta-annotations, Jakarta Annotations 2.0>>
 - <<jakarta-jaxrs, Jakarta RESTful Web Services 3.0>>
 - <<jakarta-jsonb, Jakarta JSON Binding 2.0>>
 - <<jakarta-jsonp, Jakarta JSON Processing 2.0>>
 - <<mp-config, MicroProfile Config 3.0-RC5>>
 - <<mp-fault-tolerance, MicroProfile Fault Tolerance 4.0-RC2>>
 - <<mp-health-check, MicroProfile Health 4.0-RC2>>
 - <<mp-jwt-auth, MicroProfile JWT Authentication 2.0-RC2>>
 - <<mp-metrics, MicroProfile Metrics 4.0-RC1>>
 - <<mp-open-api, MicroProfile OpenAPI 3.0-RC1>>
 - <<mp-opentracing, MicroProfile OpenTracing 3.0-RC2>>
 - <<mp-rest-client, MicroProfile Rest Client 3.0-RC2>>

A MicroProfile compatible implementation must pass *all* required TCKs provided by each MicroProfile specification.
Passing the MicroProfile optional TCKs is not required. Passing the Jakarta specifications TCKs is optional.

These APIs and versions guarantee application developers a minimum set of APIs, but they are not intended to be
restrictive.

[[javase]]
=== Java SE

Libraries in use by the MicroProfile leverage new features provided in Java SE 8, therefore Java SE 7 and before are
unsupported.

MicroProfile APIs and specifications use Java SE 8 for both source and target compatibility. MicroProfile
implementations are free to provide support for runtimes starting at Java SE 8 or higher.

[[jakarta-cdi]]
=== Jakarta Contexts and Dependency Injection (CDI) 3.0

Jakarta CDI provides the base for a growing number of APIs included in MicroProfile.
Use of implementations beyond CDI 3.0 in MicroProfile is allowed, however, not required.

 - https://jakarta.ee/specifications/cdi/3.0/jakarta-cdi-spec-3.0.html
 - http://cdi-spec.org/

[[jakarta-annotations]]
=== Jakarta Annotations 2.0

Jakarta Annotations provides annotations for common semantic concepts across a variety of individual technologies in the Java(TM) SE and Jakarta EE platforms.
Use of implementations beyond Jakarta Annotations 2.0 

 - https://jakarta.ee/specifications/annotations/2.0/annotations-spec-2.0.html
 - https://github.com/eclipse-ee4j/common-annotations-api

[[jakarta-jaxrs]]
=== Jakarta RESTful Web Services (JAX-RS) 3.0

Jakarta JAX-RS provides both standard client and server APIs for RESTful communication by MicroProfile applications.
Use of implementations beyond JAX-RS 3.0 in MicroProfile is allowed, however, not required.

 - https://jakarta.ee/specifications/restful-ws/3.0/jakarta-restful-ws-spec-3.0.html
 - https://github.com/eclipse-ee4j/jaxrs-api

[[jakarta-jsonb]]
=== Jakarta JSON-B 2.0

Jakarta JSON-B is leveraged as part of MicroProfile to provide standard APIs for binding JSON documents to Java code.
Use of implementations beyond JSON-B 2.0 in MicroProfile is allowed, however, not required.

 - https://jakarta.ee/specifications/jsonb/2.0/jakarta-jsonb-spec-2.0.html
 - https://github.com/eclipse-ee4j/jsonb-api

[[jakarta-jsonp]]
=== Jakarta JSON-P 2.0

Jakarta JSON-P is leveraged as part of MicroProfile to provide standard APIs for processing JSON documents.
Use of implementations beyond JSON-P 2.0 in MicroProfile is allowed, however, not required.

 - https://jakarta.ee/specifications/jsonp/2.0/apidocs/
 - https://github.com/eclipse-ee4j/jsonp



[[mp-config]]
=== MicroProfile Config 3.0-RC5

MicroProfile Config provides applications and microservices means to obtain configuration properties through several environment-aware sources both internal and external to the application and made available through dependency injection or lookup.

 - http://microprofile.io/project/eclipse/microprofile-config
 - https://github.com/eclipse/microprofile-config/releases/tag/3.0-RC5

[[mp-fault-tolerance]]
=== MicroProfile Fault Tolerance 4.0-RC4

MicroProfile Fault Tolerance provides the ability to separate execution logic from business logic.
Key aspects of the API include TimeOut, RetryPolicy, Fallback, Bulkhead, and Circuit Breaker processing.
Fault Tolerance 3.0 is now dependent on Jakarta EE 8 technologies.

 - http://microprofile.io/project/eclipse/microprofile-fault-tolerance
 - https://github.com/eclipse/microprofile-fault-tolerance/releases/tag/4.0-RC4

[[mp-health-check]]
=== MicroProfile Health 4.0-RC3

MicroProfile Health provides the ability to expose the health of an application
to the underlying platform (ex: Kubernetes)

 - http://microprofile.io/project/eclipse/microprofile-health
 - https://github.com/eclipse/microprofile-health/releases/tag/4.0-RC3

[[mp-jwt-auth]]
=== MicroProfile JWT Authentication 2.0-RC2

MicroProfile JWT Authentication provides role based access control (RBAC) microservice endpoints using OpenID Connect (OIDC) and JSON Web Tokens (JWT).

 - http://microprofile.io/project/eclipse/microprofile-jwt-auth
 - https://github.com/eclipse/microprofile-jwt-auth/releases/tag/2.0-RC2

[[mp-metrics]]
=== MicroProfile Metrics 4.0-RC4

MicroProfile Metrics provides a unified way for MicroProfile applications to export monitoring data to management agents.
Metrics will also provide a common Java API for exposing their telemetry data.

 - http://microprofile.io/project/eclipse/microprofile-metrics
 - https://github.com/eclipse/microprofile-metrics/releases/tag/4.0-RC4

[[mp-open-api]]
=== MicroProfile OpenAPI 3.0-RC3

MicroProfile OpenAPI provides a unified Java API for the https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md[OpenAPI v3 specification] that all application developers can use to expose their API documentation.

 - http://microprofile.io/project/eclipse/microprofile-open-api
 - https://github.com/eclipse/microprofile-open-api/releases/tag/3.0-RC3

[[mp-opentracing]]
=== MicroProfile OpenTracing 3.0-RC3

MicroProfile OpenTracing defines an API and associated behaviors that allow services to easily participate in a distributed tracing environment.

 - http://microprofile.io/project/eclipse/microprofile-opentracing
 - https://github.com/eclipse/microprofile-opentracing/releases/tag/3.0-RC3

[[mp-rest-client]]
=== MicroProfile Rest Client 3.0-RC3

MicroProfile Rest Client provides a type-safe approach for invoking RESTful services over HTTP.
The MicroProfile Rest Client builds upon the https://github.com/eclipse-ee4j/jaxrs-api[JAX-RS 2.1 APIs] for consistency and ease-of-use.

- http://microprofile.io/project/eclipse/microprofile-rest-client
- https://github.com/eclipse/microprofile-rest-client/releases/tag/3.0-RC3
